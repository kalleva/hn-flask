status: 200
server: nginx
date: Thu, 06 Jul 2017 16:59:44 GMT
content-type: application/json; charset=utf-8
content-length: 1642
connection: keep-alive
access-control-allow-origin: *
cache-control: no-cache
strict-transport-security: max-age=31556926; includeSubDomains; preload
content-location: https://hacker-news.firebaseio.com/v0/item/14707652.json?print=pretty

{
  "by" : "philometor",
  "descendants" : 0,
  "id" : 14707652,
  "score" : 5,
  "text" : "I’ve been doing a lot of googling regarding managing dependencies between microservices. We’re trying to move away from big monolithic app into micro-services in order to scale organizationally and be able to develop faster and with multiple teams working in parallel.<p>However, as we’re trying to functionally partition the monolith into the microservices, we see how intertwined business logic and data really is. This was not a problem when we were sitting on top of one big DB and were able to do big relational joins. But with microservices, this becomes a problem.<p>One solution is to make microservice-A go to 5-10 other microservices to get necessary data (this is equivalent of DB view with join). Another solution is to make microservice-A listen to events from 5-10 other services and populate local storage with relevant into (this is an equivalent of materialized view).\nEither way, microservice-A is coupled with 5-10 other services, and if new info is needed in microservice-A, the some of the services that it depends upon might will need to be release prior to microservice-A. Please note that microservice-A is itself depended upon by other services. Bottom line, we end up with DISTRIBUTED dependency hell.<p>Many articles advocate for second solution – i.e. something along the lines of Event Sourcing, Choreography, etc.<p>I would appreciate any shared experiences, recommendations and insights.<p>Philometor.",
  "time" : 1499306231,
  "title" : "Ask HN: Microservices, Dependencies and Events",
  "type" : "story"
}
